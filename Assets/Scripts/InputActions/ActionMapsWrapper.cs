//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputSystem/ActionMapsWrapper.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputActions
{
    public partial class @ActionMapsWrapper: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ActionMapsWrapper()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ActionMapsWrapper"",
    ""maps"": [
        {
            ""name"": ""InitialBoard"",
            ""id"": ""6b0ab165-a6ba-48bf-887c-2040071f6f03"",
            ""actions"": [
                {
                    ""name"": ""Any"",
                    ""type"": ""Button"",
                    ""id"": ""08f7b6a1-ff66-4068-a901-7079c6f819b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""68f6d7de-542c-4930-a0a7-3fb39ebc5219"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""a2dca9a3-563b-4d3c-9e48-07ac711de16e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f4031f9f-04f4-4911-bcb3-676d748282e5"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Any"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ed1f953-9b2b-4e23-bf96-9b122fc7adbc"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d811b38-39ef-47da-8ea6-fd90f9558c1b"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InterfaceBoard"",
            ""id"": ""7e53604d-bc1d-4a17-8b73-41e68fe7e2b0"",
            ""actions"": [
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""2bfb3fac-44bb-4470-9ac4-236854440570"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""2146963e-992f-4528-9f81-d4356df8c1c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""f56658a4-77c9-4b73-828d-57f0350bd06d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""a6eaf789-9cf0-4e1f-8001-880817aac646"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Help"",
                    ""type"": ""Button"",
                    ""id"": ""8150bc43-e895-406f-bed2-78b3f1393f77"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Any"",
                    ""type"": ""Button"",
                    ""id"": ""7cb7433d-2ad5-4404-b17a-e1e7a2975e22"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b6f3575a-4894-4c3a-aec2-d3d38879289d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bc9f40d-d9c9-408e-8147-7d8b9945c075"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d6322cd-c493-4293-aa19-114354424ee0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47803f66-4fe0-4024-b1fd-640c2f02f022"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b689171f-b134-4015-89db-92b237ad2c0e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b588f74-049a-41dc-953c-4613d08bfc6b"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a47b86e4-e5c8-4dc2-8873-32ec56b6bdef"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Help"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42571ffe-83b6-4b71-9463-adbd4d350489"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Help"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""fac0e304-fd58-4970-bee7-2fe717873aac"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Help"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""d57a5773-4f92-45b3-a981-e011389e3e0f"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Help"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""8e0f13c6-37fc-4b4d-9ba0-aa2a5e34b17e"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Help"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f939dc2a-13c3-4b81-b453-56af627fa623"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Any"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // InitialBoard
            m_InitialBoard = asset.FindActionMap("InitialBoard", throwIfNotFound: true);
            m_InitialBoard_Any = m_InitialBoard.FindAction("Any", throwIfNotFound: true);
            m_InitialBoard_Cancel = m_InitialBoard.FindAction("Cancel", throwIfNotFound: true);
            m_InitialBoard_Confirm = m_InitialBoard.FindAction("Confirm", throwIfNotFound: true);
            // InterfaceBoard
            m_InterfaceBoard = asset.FindActionMap("InterfaceBoard", throwIfNotFound: true);
            m_InterfaceBoard_Left = m_InterfaceBoard.FindAction("Left", throwIfNotFound: true);
            m_InterfaceBoard_Right = m_InterfaceBoard.FindAction("Right", throwIfNotFound: true);
            m_InterfaceBoard_Cancel = m_InterfaceBoard.FindAction("Cancel", throwIfNotFound: true);
            m_InterfaceBoard_Confirm = m_InterfaceBoard.FindAction("Confirm", throwIfNotFound: true);
            m_InterfaceBoard_Help = m_InterfaceBoard.FindAction("Help", throwIfNotFound: true);
            m_InterfaceBoard_Any = m_InterfaceBoard.FindAction("Any", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // InitialBoard
        private readonly InputActionMap m_InitialBoard;
        private List<IInitialBoardActions> m_InitialBoardActionsCallbackInterfaces = new List<IInitialBoardActions>();
        private readonly InputAction m_InitialBoard_Any;
        private readonly InputAction m_InitialBoard_Cancel;
        private readonly InputAction m_InitialBoard_Confirm;
        public struct InitialBoardActions
        {
            private @ActionMapsWrapper m_Wrapper;
            public InitialBoardActions(@ActionMapsWrapper wrapper) { m_Wrapper = wrapper; }
            public InputAction @Any => m_Wrapper.m_InitialBoard_Any;
            public InputAction @Cancel => m_Wrapper.m_InitialBoard_Cancel;
            public InputAction @Confirm => m_Wrapper.m_InitialBoard_Confirm;
            public InputActionMap Get() { return m_Wrapper.m_InitialBoard; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InitialBoardActions set) { return set.Get(); }
            public void AddCallbacks(IInitialBoardActions instance)
            {
                if (instance == null || m_Wrapper.m_InitialBoardActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InitialBoardActionsCallbackInterfaces.Add(instance);
                @Any.started += instance.OnAny;
                @Any.performed += instance.OnAny;
                @Any.canceled += instance.OnAny;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Confirm.started += instance.OnConfirm;
                @Confirm.performed += instance.OnConfirm;
                @Confirm.canceled += instance.OnConfirm;
            }

            private void UnregisterCallbacks(IInitialBoardActions instance)
            {
                @Any.started -= instance.OnAny;
                @Any.performed -= instance.OnAny;
                @Any.canceled -= instance.OnAny;
                @Cancel.started -= instance.OnCancel;
                @Cancel.performed -= instance.OnCancel;
                @Cancel.canceled -= instance.OnCancel;
                @Confirm.started -= instance.OnConfirm;
                @Confirm.performed -= instance.OnConfirm;
                @Confirm.canceled -= instance.OnConfirm;
            }

            public void RemoveCallbacks(IInitialBoardActions instance)
            {
                if (m_Wrapper.m_InitialBoardActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IInitialBoardActions instance)
            {
                foreach (var item in m_Wrapper.m_InitialBoardActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InitialBoardActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public InitialBoardActions @InitialBoard => new InitialBoardActions(this);

        // InterfaceBoard
        private readonly InputActionMap m_InterfaceBoard;
        private List<IInterfaceBoardActions> m_InterfaceBoardActionsCallbackInterfaces = new List<IInterfaceBoardActions>();
        private readonly InputAction m_InterfaceBoard_Left;
        private readonly InputAction m_InterfaceBoard_Right;
        private readonly InputAction m_InterfaceBoard_Cancel;
        private readonly InputAction m_InterfaceBoard_Confirm;
        private readonly InputAction m_InterfaceBoard_Help;
        private readonly InputAction m_InterfaceBoard_Any;
        public struct InterfaceBoardActions
        {
            private @ActionMapsWrapper m_Wrapper;
            public InterfaceBoardActions(@ActionMapsWrapper wrapper) { m_Wrapper = wrapper; }
            public InputAction @Left => m_Wrapper.m_InterfaceBoard_Left;
            public InputAction @Right => m_Wrapper.m_InterfaceBoard_Right;
            public InputAction @Cancel => m_Wrapper.m_InterfaceBoard_Cancel;
            public InputAction @Confirm => m_Wrapper.m_InterfaceBoard_Confirm;
            public InputAction @Help => m_Wrapper.m_InterfaceBoard_Help;
            public InputAction @Any => m_Wrapper.m_InterfaceBoard_Any;
            public InputActionMap Get() { return m_Wrapper.m_InterfaceBoard; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InterfaceBoardActions set) { return set.Get(); }
            public void AddCallbacks(IInterfaceBoardActions instance)
            {
                if (instance == null || m_Wrapper.m_InterfaceBoardActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InterfaceBoardActionsCallbackInterfaces.Add(instance);
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Confirm.started += instance.OnConfirm;
                @Confirm.performed += instance.OnConfirm;
                @Confirm.canceled += instance.OnConfirm;
                @Help.started += instance.OnHelp;
                @Help.performed += instance.OnHelp;
                @Help.canceled += instance.OnHelp;
                @Any.started += instance.OnAny;
                @Any.performed += instance.OnAny;
                @Any.canceled += instance.OnAny;
            }

            private void UnregisterCallbacks(IInterfaceBoardActions instance)
            {
                @Left.started -= instance.OnLeft;
                @Left.performed -= instance.OnLeft;
                @Left.canceled -= instance.OnLeft;
                @Right.started -= instance.OnRight;
                @Right.performed -= instance.OnRight;
                @Right.canceled -= instance.OnRight;
                @Cancel.started -= instance.OnCancel;
                @Cancel.performed -= instance.OnCancel;
                @Cancel.canceled -= instance.OnCancel;
                @Confirm.started -= instance.OnConfirm;
                @Confirm.performed -= instance.OnConfirm;
                @Confirm.canceled -= instance.OnConfirm;
                @Help.started -= instance.OnHelp;
                @Help.performed -= instance.OnHelp;
                @Help.canceled -= instance.OnHelp;
                @Any.started -= instance.OnAny;
                @Any.performed -= instance.OnAny;
                @Any.canceled -= instance.OnAny;
            }

            public void RemoveCallbacks(IInterfaceBoardActions instance)
            {
                if (m_Wrapper.m_InterfaceBoardActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IInterfaceBoardActions instance)
            {
                foreach (var item in m_Wrapper.m_InterfaceBoardActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InterfaceBoardActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public InterfaceBoardActions @InterfaceBoard => new InterfaceBoardActions(this);
        public interface IInitialBoardActions
        {
            void OnAny(InputAction.CallbackContext context);
            void OnCancel(InputAction.CallbackContext context);
            void OnConfirm(InputAction.CallbackContext context);
        }
        public interface IInterfaceBoardActions
        {
            void OnLeft(InputAction.CallbackContext context);
            void OnRight(InputAction.CallbackContext context);
            void OnCancel(InputAction.CallbackContext context);
            void OnConfirm(InputAction.CallbackContext context);
            void OnHelp(InputAction.CallbackContext context);
            void OnAny(InputAction.CallbackContext context);
        }
    }
}
