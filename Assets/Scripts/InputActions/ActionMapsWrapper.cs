//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputSystem/ActionMapsWrapper.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputActions
{
    public partial class @ActionMapsWrapper: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ActionMapsWrapper()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ActionMapsWrapper"",
    ""maps"": [
        {
            ""name"": ""InitialBoard"",
            ""id"": ""6b0ab165-a6ba-48bf-887c-2040071f6f03"",
            ""actions"": [
                {
                    ""name"": ""Any"",
                    ""type"": ""Button"",
                    ""id"": ""08f7b6a1-ff66-4068-a901-7079c6f819b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""68f6d7de-542c-4930-a0a7-3fb39ebc5219"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""a2dca9a3-563b-4d3c-9e48-07ac711de16e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f4031f9f-04f4-4911-bcb3-676d748282e5"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Any"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ed1f953-9b2b-4e23-bf96-9b122fc7adbc"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d811b38-39ef-47da-8ea6-fd90f9558c1b"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""QuitDialogBox"",
            ""id"": ""0500fcb8-ce25-43d7-9eef-a74d4296ef5d"",
            ""actions"": [
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""19142f8e-74fc-4f5f-a6aa-7e41c3f6d0a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""06838767-069b-42dc-8c32-2e9789fe691d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c7d247bc-47c0-4e39-a86d-03b75abfca98"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1e2c536-8a52-4776-8c32-4aaef24c088f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // InitialBoard
            m_InitialBoard = asset.FindActionMap("InitialBoard", throwIfNotFound: true);
            m_InitialBoard_Any = m_InitialBoard.FindAction("Any", throwIfNotFound: true);
            m_InitialBoard_Cancel = m_InitialBoard.FindAction("Cancel", throwIfNotFound: true);
            m_InitialBoard_Confirm = m_InitialBoard.FindAction("Confirm", throwIfNotFound: true);
            // QuitDialogBox
            m_QuitDialogBox = asset.FindActionMap("QuitDialogBox", throwIfNotFound: true);
            m_QuitDialogBox_Confirm = m_QuitDialogBox.FindAction("Confirm", throwIfNotFound: true);
            m_QuitDialogBox_Cancel = m_QuitDialogBox.FindAction("Cancel", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // InitialBoard
        private readonly InputActionMap m_InitialBoard;
        private List<IInitialBoardActions> m_InitialBoardActionsCallbackInterfaces = new List<IInitialBoardActions>();
        private readonly InputAction m_InitialBoard_Any;
        private readonly InputAction m_InitialBoard_Cancel;
        private readonly InputAction m_InitialBoard_Confirm;
        public struct InitialBoardActions
        {
            private @ActionMapsWrapper m_Wrapper;
            public InitialBoardActions(@ActionMapsWrapper wrapper) { m_Wrapper = wrapper; }
            public InputAction @Any => m_Wrapper.m_InitialBoard_Any;
            public InputAction @Cancel => m_Wrapper.m_InitialBoard_Cancel;
            public InputAction @Confirm => m_Wrapper.m_InitialBoard_Confirm;
            public InputActionMap Get() { return m_Wrapper.m_InitialBoard; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InitialBoardActions set) { return set.Get(); }
            public void AddCallbacks(IInitialBoardActions instance)
            {
                if (instance == null || m_Wrapper.m_InitialBoardActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InitialBoardActionsCallbackInterfaces.Add(instance);
                @Any.started += instance.OnAny;
                @Any.performed += instance.OnAny;
                @Any.canceled += instance.OnAny;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Confirm.started += instance.OnConfirm;
                @Confirm.performed += instance.OnConfirm;
                @Confirm.canceled += instance.OnConfirm;
            }

            private void UnregisterCallbacks(IInitialBoardActions instance)
            {
                @Any.started -= instance.OnAny;
                @Any.performed -= instance.OnAny;
                @Any.canceled -= instance.OnAny;
                @Cancel.started -= instance.OnCancel;
                @Cancel.performed -= instance.OnCancel;
                @Cancel.canceled -= instance.OnCancel;
                @Confirm.started -= instance.OnConfirm;
                @Confirm.performed -= instance.OnConfirm;
                @Confirm.canceled -= instance.OnConfirm;
            }

            public void RemoveCallbacks(IInitialBoardActions instance)
            {
                if (m_Wrapper.m_InitialBoardActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IInitialBoardActions instance)
            {
                foreach (var item in m_Wrapper.m_InitialBoardActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InitialBoardActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public InitialBoardActions @InitialBoard => new InitialBoardActions(this);

        // QuitDialogBox
        private readonly InputActionMap m_QuitDialogBox;
        private List<IQuitDialogBoxActions> m_QuitDialogBoxActionsCallbackInterfaces = new List<IQuitDialogBoxActions>();
        private readonly InputAction m_QuitDialogBox_Confirm;
        private readonly InputAction m_QuitDialogBox_Cancel;
        public struct QuitDialogBoxActions
        {
            private @ActionMapsWrapper m_Wrapper;
            public QuitDialogBoxActions(@ActionMapsWrapper wrapper) { m_Wrapper = wrapper; }
            public InputAction @Confirm => m_Wrapper.m_QuitDialogBox_Confirm;
            public InputAction @Cancel => m_Wrapper.m_QuitDialogBox_Cancel;
            public InputActionMap Get() { return m_Wrapper.m_QuitDialogBox; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(QuitDialogBoxActions set) { return set.Get(); }
            public void AddCallbacks(IQuitDialogBoxActions instance)
            {
                if (instance == null || m_Wrapper.m_QuitDialogBoxActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_QuitDialogBoxActionsCallbackInterfaces.Add(instance);
                @Confirm.started += instance.OnConfirm;
                @Confirm.performed += instance.OnConfirm;
                @Confirm.canceled += instance.OnConfirm;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
            }

            private void UnregisterCallbacks(IQuitDialogBoxActions instance)
            {
                @Confirm.started -= instance.OnConfirm;
                @Confirm.performed -= instance.OnConfirm;
                @Confirm.canceled -= instance.OnConfirm;
                @Cancel.started -= instance.OnCancel;
                @Cancel.performed -= instance.OnCancel;
                @Cancel.canceled -= instance.OnCancel;
            }

            public void RemoveCallbacks(IQuitDialogBoxActions instance)
            {
                if (m_Wrapper.m_QuitDialogBoxActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IQuitDialogBoxActions instance)
            {
                foreach (var item in m_Wrapper.m_QuitDialogBoxActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_QuitDialogBoxActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public QuitDialogBoxActions @QuitDialogBox => new QuitDialogBoxActions(this);
        public interface IInitialBoardActions
        {
            void OnAny(InputAction.CallbackContext context);
            void OnCancel(InputAction.CallbackContext context);
            void OnConfirm(InputAction.CallbackContext context);
        }
        public interface IQuitDialogBoxActions
        {
            void OnConfirm(InputAction.CallbackContext context);
            void OnCancel(InputAction.CallbackContext context);
        }
    }
}
